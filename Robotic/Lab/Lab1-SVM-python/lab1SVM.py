 #!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Apr 18 13:52:44 2019

@author: junchengzhu
"""


from sklearn.svm import SVC,LinearSVC
from sklearn import model_selection
 
X=[
[148.004,71.0,1026.561,1585.218,2920.418,3946.309,138.818,180.025,1061.236,740.416],
[244.948,68.042,1081.502,1676.727,2995.63,4140.143,145.002,145.345,809.15,378.717],
[141.483,75.728,1028.488,1642.513,2766.681,3422.091,64.557,102.774,104.309,209.315],
[227.421,68.424,1203.214,1812.705,3100.961,4221.391,443.53,543.979,444.915,258.943],
[294.345,60.48,1187.432,1929.65,3365.506,4397.294,522.396,803.599,346.235,199.495],
[269.622,74.127,842.258,1729.385,3126.506,4071.157,989.957,459.421,419.165,389.649],
[130.676,74.238,856.278,1316.467,2844.9,3530.199,99.514,89.302,1426.556,695.504],
[187.118,61.08,1049.2,1765.326,2859.306,3961.547,927.502,359.82,703.217,717.785],
[182.988,75.649,1069.614,1617.42,2809.565,3918.169,118.644,146.152,371.631,217.34],

[130.715,65.407,925.864,1727.784,2825.293,4070.821,191.351,133.566,126.485,564.661],
[199.676,64.189,900.887,1630.035,2998.414,3856.071,183.93,114.576,508.882,341.951],
[163.745,65.157,964.366,1712.517,2909.095,3818.905,135.436,92.855,552.14,311.054],
[118.487,67.401,886.081,1563.89,2751.811,3772.353,73.283,163.583,960.798,808.768],
[85.074,63.26,865.384,1564.582,2711.182,3751.69,633.723,269.258,774.814,384.615],
[94.199,67.827,891.044,1507.299,2862.042,3938.947,84.661,73.962,171.438,258.902],
[172.465,57.945,776.825,1490.396,2594.769,3807.435,207.685,837.431,224.311,339.811],
[211.345,85.66,891.983,1554.009,2916.625,3600.323,221.92,223.967,484.418,223.762],
[115.358,59.441,860.507,1540.669,2595.677,3765.012,137.979,144.474,164.925,377.609]
 
   
   
]
Y = [0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1]
# Z = [182.988,75.649,1069.614,1617.42,2809.565,3918.169,118.644,146.152,371.631,217.34]


































'''
SVC and NuSVC
'''
x_train,x_test,y_train,y_test=model_selection.train_test_split(X,Y,random_state=1,test_size=0.2)

clf = SVC(kernel='rbf',gamma=0.1,decision_function_shape='ovo') # ovo means one versus one
clf.fit(x_train,y_train)
print ("SVC accurancy:",clf.score(x_train,x_test))
 
# dec = clf.decision_function([Z])    #返回的是样本距离超平面的距离
# print ("SVC:",dec)
 
# clf.decision_function_shape = "ovr" # ovr = one versus the rest
# dec = clf.decision_function([Z]) #返回的是样本距离超平面的距离
# print ("SVC:",dec)
 
#预测
print ("Predict：",clf.predict([Z]))












